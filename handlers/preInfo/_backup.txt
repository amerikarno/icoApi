func (h *PreInfoHandler) GetTAPInfo() echo.HandlerFunc {
	return func(c echo.Context) error {
		json_map := make(map[string]interface{})
err := json.NewDecoder(c.Request().Body).Decode(&json_map)
if err != nil {
    return err
}
    id := json_map["id"]
		var data []byte
		fmt.Printf("id: %v\n", id)

		cct := []models.CurrentCareerTypeST{}
		if id == "1" {data = []byte(mockJson.First)}
		if id == "2" {data = []byte(mockJson.Second)}
		if id == "3" {data = []byte(mockJson.Third)}
		if id == "4" {data = []byte(mockJson.Forth)}
		if id == "5" {data = []byte(mockJson.Fifth)}
		if id == "6" {data = []byte(mockJson.Sixth)}
		if id == "7" {data = []byte(mockJson.Seventh)}
		if id == "8" {data = []byte(mockJson.Eighth)}
		if id == "9" {data = []byte(mockJson.Ninth)}
		if id == "10" {data = []byte(mockJson.Tenth)}
		if id == "11" {data = []byte(mockJson.Eleventh)}
		if id == "12" {data = []byte(mockJson.Twelth)}
		if id == "13" {data = []byte(mockJson.Thirteenth)}
		if id == "14" {data = []byte(mockJson.Forteenth)}
		if id == "15" {data = []byte(mockJson.Fifteenth)}

		err = json.Unmarshal(data, &cct)
    if err != nil {
        panic(err)
    }
	var resp models.BasicInfo
	resp.CurrentCareerType = cct
	resp.Success = true
		return c.JSON(http.StatusOK, resp)
	}
}
func (h *PreInfoHandler) GetBankBranch() echo.HandlerFunc {
	return func(c echo.Context) error {
		json_map := make(map[string]interface{})
err := json.NewDecoder(c.Request().Body).Decode(&json_map)
if err != nil {
    return err
}
    id := json_map["id"]
		var data []byte
		fmt.Printf("id: %v\n", id)

		cct := []models.BankBranchST{}
		if id == "002" {data = []byte(mockJson.BB002)}
		if id == "004" {data = []byte(mockJson.BB004)}
		if id == "006" {data = []byte(mockJson.BB006)}

		err = json.Unmarshal(data, &cct)
    if err != nil {
        panic(err)
    }
	var resp models.BasicInfo
	resp.BankBranch = cct
	resp.Success = true
		return c.JSON(http.StatusOK, resp)
	}
}

if module == "module_top" {
			// databyte = []byte(mockJson.OTPdata)
			// infobyte = []byte(mockJson.OTPinfo)
			otpnext = models.OTPNextModule{
				Module:     "4",
				GroupType:  4,
				PageNumber: 1,
				Page:       "identity",
				Sub:        "selection",
				Step:       "type",
				URL:        "identity/selection/type",
				Success:    false,
			}
			otpdata = models.OTPdata{}
		}
		resp.Data.Info = otpinfo
		resp.Data = otpdata
		resp.NextModule = otpnext
		resp.SessionOTP = "387e7f4993c04a16a95c2b6a754d2768"
		resp.Success = true
		return c.JSON(http.StatusOK, resp)